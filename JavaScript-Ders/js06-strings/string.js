const str1 = "new string"
const str2 = 'new string'
const str3 = `new string`  //template literal
const str4 = new String ("new string")


console.log(str1);
console.log(str2);
console.log(str3);
console.log(str4);
console.log("üçäü•≠üïåüïã");


// "Escape charecters" (kacis karekterleri), ozel bir anlamƒ± olan karekterlerin belirtilmi≈ü bir ama√ß i√ßin kullanilmasini saglayan karekterlerdir

// \Escape karakterler   \ isareti ile kullanilir.

// \ isareti  bi sonraki yazƒ±lan seyin bir stringe girmesini saglar.


let metin= `√∂m'er,'in kalemi`
console.log(metin);
let path="c\\users\\kullanici"


console.log(path);


// \n   new line==> bir alt satira ge√ßmesini saƒülar

// \t tab bo≈ülugu verir  (8karekterlik bir bosluga tekabul eder)



/* -------------------------------------------------------------------------- */
//!                         STRING PROPERTY AND METHODS                       */
/* -------------------------------------------------------------------------- */

//! ************STRING PROPERTY (√ñzellikleri) ************
// Property bir stringin kendi √∂zelliƒüidir bir method(fonksiyon) deƒüildir bu nedenle parantez a√ßƒ±p kapatmaya gerek yoktur


//  length
// prototype

let x="abc"
console.log(x.length);

let xx="clarus way qwe"
let xxx= xx.split(" ")
console.log(xxx);
console.log(xxx.reverse().join(" "));


let lorem="Lorem ipsum, dolor sit amet consectetur adipisicing elit. Odit quas voluptatum saepe molestiae corrupti quae, possimus doloribus consequuntur libero, officiis at tempore rem assumenda. Dolor natus enim necessitatibus vel ata itaque cum delectus maxime, iusto perferendis ducimus assumenda? Exercitationem dolor quo itaque illo similique ullam odit nemo, dolorum cum, ipsum sunt, quos incidunt! Quasi commodi velit omnis inventore in labore tempora nisi! Aut a ab sequi, omnis sit saepe dolore nihil voluptatem dede possimus quidem soluta accusamus nam asperiores. Voluptates accusantium doloribus dolores ipsam. Voluptatibus a harum hic, placeat velit nam soluta aliquid repudiandae quia cumque ipsum fugit quasi libero! Deserunt eaque adipisci quae exercitationem officiis quaerat dignissimos suscipit sit, magni maiores delectus. Sit illo officiis est deleniti provident, eaque libero ut in enim odio, distinctio nobis? Totam est ipsum perspiciatis praesentium eveniet tenetur similique rerum veritatis! Quidem voluptatibus in facere voluptas suscipit quas consequuntur, magni libero delectus, cupiditate voluptates omnis officia! ece"
let loremtek= lorem.split(" ")

for(let i = 0;i<loremtek.length ; i++){
    let loremters=loremtek[i].split("").reverse().join("")    
    if(loremtek[i] === loremters && loremters.length !== 1)
    {console.log(`"${loremters}"  is polindrom`);}
    
    
}

















// console.log(lorem.slice(0,5));
// console.log(lorem.lastIndexOf("s"));

// console.log(lorem.replace(/fav/,"wtf"));
// console.log(lorem.search("wtf"));




/* -------------------------------------------------------------------------- */
/*                                   STRINGS                                  */
/* -------------------------------------------------------------------------- */
// Bir string, metin veya karakter dizisi olarak adlandƒ±rƒ±lan verileri temsil eder. JavaScript'te stringler √ßift tƒ±rnak ("), tek tƒ±rnak ('), veya backtick (`) i√ßinde tanƒ±mlanabilir. 

//? String olu≈üuturma y√∂ntemleri
const str1="new string"
const str2='new string'
const deger="merhaba"
const str3=`new string ${deger}`   // backtickler ile template literal
const str4=new String("new string")
console.log(str1)
console.log(str2)
console.log(str3)
console.log(str4)
console.log("üéàüéÜüéáüß®‚ú®")
console.log("¬©")
/* -------------------------------------------------------------------------- */
//! ---------------------------- ESCAPE CHARACTERS -------------------------- */

// "Escape characters" (ka√ßƒ±≈ü karakterleri), √∂zel bir anlamƒ± olan karakterlerin belirtilmi≈ü bir ama√ß i√ßin kullanƒ±lmasƒ±nƒ± saƒülayan karakterlerdir

//  \ Escape karakterler \i≈üareti ile kullanƒ±lƒ±r

// \ hemen yanƒ±ndaki karkateri g√∂z ardƒ± edilmesini saƒülar

let metin='√ñmer\'in kalemi'
let path="c:\\Users\\Kullanƒ±cƒ±lar"
console.log(path)   // users\kullanƒ±cƒ±lar

// \n  new line => bir alt satƒ±ra ge√ßmesini saƒülar
// \t tab bo≈üluƒüu verir ( 8 karakterlik bo≈üluk)
const parag="\tMerhaba Cohort 16 sakinleri\nG√ºn√ºn√ºz g√ºzel ge√ßsin"
console.log(parag)

// Unicode karakterleri i√ßin 
console.log("\u2615")
console.log("\uD83C\uDF39")
console.log("\uD83D\uDCB2")
console.log("\u00A9") 

console.log(`       Merhaba Cohort 16 sakinleri   üåπ  

G√ºn√ºn√ºz g√ºzel ge√ßsin`)
// console.clear()
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
//!                        STRING YAPISI VE INDEXLEME                         */
/* -------------------------------------------------------------------------- */

let course="Clarusway"
console.log(course)

console.log(course[0])
console.log(course[4])
console.log(course[7])
// Stringler,primitive bir t√ºr olduƒüu i√ßin par√ßa olarak deƒüi≈ütiremezsiniz
// immutable - not mutable
course[4]="a" // deƒüi≈üim yapƒ±lamaz
course="Clarusway Bootcamp"
console.log(course)

for (let i=0; i<=17;i++){
    console.log(course[i])
}

/* -------------------------------------------------------------------------- */
//!                         STRING PROPERTY AND METHODS                       */
/* -------------------------------------------------------------------------- */

//! ************STRING PROPERTY (√ñzellikleri) ************
// Property bir stringin kendi √∂zelliƒüidir bir method(fonksiyon) deƒüildir bu nedenle parantez a√ßƒ±p kapatmaya gerek yoktur

//? length
//? prototype

console.log(course.length)

for (let i=0; i<course.length;i++){
    console.log(course[i])
}
console.clear()
for (let i=course.length-1; i>=0;i--){
    console.log(course[i])
}
const emoji="üéÜ"
console.log(emoji.length)


//! ************STRING METHODS ************
//! -------------------------------------------------------------------------- */
// charAt()             Returns the character at the specified index.
// charCodeAt()	        Returns the Unicode of the character at the specified index.
// concat()	            Joins two or more strings, and returns a new string.
// endsWith()	        Checks whether a string ends with a specified substring.
// fromCharCode()	    Converts Unicode values to characters.
// includes()	        Checks whether a string contains the specified substring.
// indexOf()	        Returns the index of the first occurrence of the specified value in a string.
// lastIndexOf()	    Returns the index of the last occurrence of the specified value in a string.
// localeCompare()	    Compares two strings in the current locale.
// match()	            Matches a string against a regular expression, and returns an array of all matches.
// repeat()	            Returns a new string which contains the specified number of copies of the original string.
// replace()	        Replaces the occurrences of a string or pattern inside a string with another string, and return a new string without modifying the original string.
// search()	             Searches a string against a regular expression, and returns the index of the first match.
// slice()	            Extracts a portion of a string and returns it as a new string.
// split()	            Splits a string into an array of substrings.
// startsWith()	        Checks whether a string begins with a specified substring.
// substr()	            Extracts the part of a string between the start index and a number of characters after it.
// substring()	        Extracts the part of a string between the start and end indexes.
// toLocaleLowerCase()	Converts a string to lowercase letters, according to host machine's current locale.
// toLocaleUpperCase()	Converts a string to uppercase letters, according to host machine's current locale.
// toLowerCase()	    Converts a string to lowercase letters.
// toString()	        Returns a string representing the specified object.
// toUpperCase()	    Converts a string to uppercase letters.
// trim()	            Removes whitespace from both ends of a string.
// valueOf()	        Returns the primitive value of a String object.
/* -------------------------------------------------------------------------- */
//! String Birle≈ütirme

const name="John"
const surname="Due"
const job="Developer"

// + 
console.log("Our customer's name: "+name+" surname:"+surname+" and his job:"+job)
console.log(`our customers's name:${name} surname:${surname} and his job: ${job}`)
const fullname=name.concat(surname)
console.log(fullname)

// toLowerCase()
// console.log(fullname.toLowerCase())

// const giris="clarusway"
// const girisKodu=prompt("Giri≈ü kodunu girin:")
// if (giris===girisKodu.toLowerCase()){
//     console.log("Giri≈üiniz onaylandƒ±")
// }
// else{
//     console.log("giri≈ü hatalƒ±")
// }
console.clear()
// toUpperCase()  B√ºy√ºk harfe √ßevirir

const statement="G√ºzel bir g√ºn, kahve ve hurma ile iyi gidiyor"
console.log(statement.toUpperCase())
console.log(statement)
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
//!                              String PAR√áALAMA                             */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                   split()                                  */
/* -------------------------------------------------------------------------- */
//split par√ßaladƒ±ƒüƒ± b√∂l√ºmleri diziye √ßevirir.
// str.split(seperator) => seperator bir ayra√ß, "" , " " , ", ", "/"

let text="Clarusway It bootcamp"
console.log(text.split(""))
const splittedText=text.split(" ")
console.log(splittedText)
console.log(splittedText[2])

for (let i=splittedText.length-1;i>=0;i--){
    console.log(splittedText[i])
}

let months="Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec"

console.log(months.toUpperCase().split("/"))

let  liste="Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand"
let yeniListe=liste.split(";")
console.log(yeniListe[2])

//! Dƒ∞KKAT JOƒ∞N ve REVERSE string metodu deƒüildir ama splitle √ßok kullanƒ±lƒ±r

let cumle="Merhaba Deƒüerli Cohort 16 sakinleri"
// bu c√ºmleyi terseten string olarak yazƒ±n
let yeniCumle=cumle.split(" ")
console.log(yeniCumle)
console.log(yeniCumle[2])
// reverse tersten yazdƒ±rma  - Array metodu
console.log(yeniCumle.reverse().join(" - "))

// Join - array metodu

// polindrom kelime : Girilen kelime polindrom mudur
// let kelime=prompt("Kelime Girin:")    
// let tersten=kelime.split("").reverse().join("")
// console.log(tersten)

// kelime===tersten ? console.log("polindrom") : console.log("polindrom deƒüil")

/* -------------------------------------------------------------------------- */
//!Slice 
//? String i√ßinde bir b√∂l√ºm√º almak i√ßin kullanƒ±lƒ±r. (immmutable, kalƒ±cƒ± deƒüi≈üiklik olmaz)
// Slice(ba≈ülangƒ±√ß index numarasƒ±, biti≈ü index numarasƒ±(bu numara dahil deƒüildir))

let ataSoz="Oku da adam ol"
console.log(ataSoz.slice(7,11))
console.log(ataSoz.slice(7))

// tersten de eri≈üim saƒülanabilir : negatif deƒüer kullanƒ±lƒ±r
console.log(ataSoz.slice(-6,-2))

//! substring(ba≈ülangƒ±√ß index numarasƒ±,biti≈ü index numarasƒ±) 
// slicedan tek farkƒ± negatif deƒüer kullanƒ±lmaz
console.log(ataSoz.substring(3,8))
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/*                        //!Stringde Deƒüi≈üiklik yapma                        */
/* -------------------------------------------------------------------------- */
// ! replace(aranan,deƒüi≈üirilecek) - ReplaceAll( aranan,deƒüi≈üirilecek)
let ozlusoz="Tecr√ºbe tarak gibidir; ama hayat insana kel olduƒüu zaman verir."

console.log(ozlusoz.replace("kel","sa√ßlƒ±"))

let variable="kullanƒ±cƒ± adƒ±"
let yeni=variable.replace(" ","_")
console.log(yeni)

let yeniDeger=yeni.replaceAll("a","√¢")
console.log(yeniDeger)

/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/*                      //!String i√ßinde Arama i≈ülemleri                      */
/* -------------------------------------------------------------------------- */
// includes, indexOf, search ,match() metodlarƒ±nƒ± kullanabiliriz

//! includes()   ... yƒ± i√ßeriyor mu -> true yada false bir deƒüer d√∂nd√ºr√ºr.caseSensitive (k√º√ß√ºk b√ºy√ºk harfe duyarlƒ±) bir √∂zelliktir.

console.log(`ozlusozde tarak kelimesi ge√ßiyor mu:${ozlusoz.includes("tarak")}`)

let url="https://clarusway.com"

let msg= url.includes("https") ? "Bu site g√ºvenilir" :" Bu site g√ºvenli deƒüil"

console.log(msg)

let email="helenclarusway.com"

msg=email.includes("@") ? "Mail adresi ge√ßerli" : "Mail adresi ge√ßersiz"
console.log(msg)

//!indexOf (aranacak metin)
//? Bir karakter yada karakter grubumun ka√ßƒ±ncƒ± sƒ±rada olduƒüunu yani index numarasƒ±nƒ± verir. 

console.log(email.indexOf("com"))

//?Eƒüer o karakter yoksa olmadƒ±ƒüƒ±nƒ± -1 deƒüeri vererek g√∂sterir. B√ºy√ºk k√º√ß√ºk harfe duyarlƒ±dƒ±r. Sadece ilk g√∂rd√ºƒü√ºn√ºn index numarasƒ±nƒ± verir

console.log(email.indexOf("edu"))

msg=email.indexOf("edu")=== -1 ? "Bu bir eƒüitim sitesi deƒüildir" : " Bu bir eƒüitim sitesidir"
console.log(msg)

//! search()

// bir string i√ßindeki aranan elemanda ilk bulduƒüunun index numarasƒ±nƒ± yazar. Bulamazsa -1 d√∂nderir.

let metin1="Clarusway it bootcamp IT .Clarusway develop you IT field"

console.log(metin1.search("IT"))
console.log(metin1.search("it"))

// Regex - regular Expression 
//   / ile ifade edilir
//  /g => global , b√ºt√ºn c√ºmle i√ßinde uygula
// /i => case sensitive √∂zlliƒüini kaldƒ±r.K√º√ß√ºk b√ºy√ºk olmasƒ±na bakmadan bul
console.log(metin1.search(/[aeiƒ±o√∂u√º]/ig))
console.log(metin1.replace(/IT/gi,"Communication"))

//! Match 
// string i√ßinde aranan metin bulunur ve bir dizi d√∂nderir.
// Regex ifadeler de kullanƒ±labilir

let metin2="Bug√ºn ger√ßekten √ßok g√ºzel , hafif serin  bug√ºn"
console.log(metin2.match(/bug√ºn/gi))

let deƒüistirilmisMetin=metin2.match(/[e]/gi)
console.log(deƒüistirilmisMetin.length)



// trim ,startsWith , endsWith
let sentence1="     Clarusway  "
console.log(sentence1.trim())

metin="Clarusway"
console.log(metin.startsWith("c"))
console.log(metin.endsWith("y"))







